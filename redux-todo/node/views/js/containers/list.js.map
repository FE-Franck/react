{"version":3,"sources":["/js/containers/list.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;qBAGkB,OAAO;;;;0BACH,aAAa;;uBACR,YAAY;;IAEjC,QAAQ;cAAR,QAAQ;;aAAR,QAAQ;8BAAR,QAAQ;;mCAAR,QAAQ;;;iBAAR,QAAQ;;eAEL,eAAC,EAAE,EAAC;AACL,gBAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;SAC5B;;;eAEG,gBAAE;;;AACF,oBAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM;AAC5B,qBAAK,UAAU;AACX,2BAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAC,GAAG,EAAG;AAC1C,+BACI;;8BAAI,OAAO,EAAE,MAAK,KAAK,CAAC,IAAI,QAAM,GAAG,CAAC,EAAE,CAAE,EAAC,SAAS,EAAE,GAAG,CAAC,QAAQ,GAAC,UAAU,GAAC,EAAG;4BAAE,GAAG,CAAC,IAAI;yBAAM,CACpG;qBACJ,CAAC;AACN,qBAAK,aAAa;AACd,2BAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAC,GAAG,EAAG;AAC1C,4BAAG,CAAC,GAAG,CAAC,QAAQ,EAAC;AACb,mCACI;;kCAAI,OAAO,EAAE,MAAK,KAAK,CAAC,IAAI,QAAM,GAAG,CAAC,EAAE,CAAE;gCAAE,GAAG,CAAC,IAAI;6BAAM,CAC7D;yBACJ;qBACJ,CAAC;AACN,qBAAK,cAAc;AACf,2BAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAC,GAAG,EAAG;AAC1C,4BAAG,GAAG,CAAC,QAAQ,EAAC;AACZ,mCACI;;kCAAI,OAAO,EAAE,MAAK,KAAK,CAAC,IAAI,QAAM,GAAG,CAAC,EAAE,CAAE,EAAC,SAAS,EAAC,UAAU;gCAAE,GAAG,CAAC,IAAI;6BAAM,CAClF;yBACJ;qBACJ,CAAC;AACN;AACI,0BAAM;AAAA,aACb;SACJ;;;eAEK,kBAAE;AACJ,mBACI;;kBAAK,SAAS,EAAC,MAAM;gBACjB;;;oBACK,IAAI,CAAC,IAAI,EAAE;iBACX;aACH,CACT;SACJ;;;WA3CC,QAAQ;GAAS,mBAAM,SAAS;;AA8CtC,SAAS,eAAe,CAAC,KAAK,EAAC;AAC3B,WAAO,KAAK,CAAC;CAChB;;AAGD,SAAS,kBAAkB,CAAC,QAAQ,EAAC;AACjC,WAAO;AACH,iBAAS,EAAC,mBAAC,EAAE,EAAG;AACZ,oBAAQ,CAAC,2BAAa,EAAE,CAAC,CAAC,CAAC;SAC9B;KACJ;CACJ;;AAED,IAAM,IAAI,GAAG,yBACT,eAAe,EACf,kBAAkB,CACrB,CAAC,QAAQ,CAAC,CAAC;;qBAEI,IAAI","file":"/js/containers/list.js","sourcesContent":["/**\n * Created by apple on 17/3/1.\n */\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport {changeActive} from '../actions';\n\nclass ListShow extends React.Component{\n\n    touch(id){\n        this.props.touchTodo(id);\n    }\n\n    show(){\n        switch(this.props.todoApp.filter){\n            case 'SHOW_ALL':\n                return this.props.todoApp.list.map((val,key)=>{\n                    return(\n                        <li onClick={this.touch.bind(this,val.id)} className={val.complete?\"complete\":''}>{val.text}</li>\n                    )\n                })\n            case 'SHOW_ACTIVE':\n                return this.props.todoApp.list.map((val,key)=>{\n                    if(!val.complete){\n                        return(\n                            <li onClick={this.touch.bind(this,val.id)}>{val.text}</li>\n                        )\n                    }\n                })\n            case 'SHOW_COMPENT':\n                return this.props.todoApp.list.map((val,key)=>{\n                    if(val.complete){\n                        return(\n                            <li onClick={this.touch.bind(this,val.id)} className=\"complete\">{val.text}</li>\n                        )\n                    }\n                })\n            default :\n                break;\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"list\">\n                <ul>\n                    {this.show()}\n                </ul>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return state;\n}\n\n\nfunction mapDispatchToProps(dispatch){\n    return {\n        touchTodo:(id)=>{\n            dispatch(changeActive(id));\n        }\n    }\n}\n\nconst List = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ListShow);\n\nexport default  List;"]}